#!/usr/bin/env node

var fs = require('fs');
var url = require('url');
var util = require('util');
var path = require('path');
var tilelive = require('../');
var progress = require('progress-stream');

var argv = require('minimist')(process.argv.slice(2), {
    alias: {
        s: 'scheme',
        l: 'list',
        c: 'concurrency',
        b: 'bounds',
        bbox: 'bounds'
    }
});

if (!argv._[0]) {
    console.log('Usage:');
    console.log('  tilelive-copy <src> [dst]');
    console.log('');
    console.log('Example:');
    console.log('  tilelive-copy orig.mbtiles copy.mbtiles');
    console.log('');
    console.log('Options:');
    console.log('  --scheme=[scanline,pyramid,list]  Default: scanline.');
    console.log('  --list=[filepath]                 Filepath if scheme is list.');
    console.log('  --concurrency=[number]            Copy concurrency.');
    console.log('  --bounds=[w,s,e,n]');
    console.log('  --minzoom=[number]');
    console.log('  --maxzoom=[number]');
    process.exit(1);
}

argv.scheme = argv.scheme || 'scanline';
argv.list = argv.list || undefined;
argv.concurrency = argv.concurrency !== undefined ? parseInt(argv.concurrency,10) : undefined;
argv.bounds = argv.bounds !== undefined ? argv.bounds.split(',').map(function(v) { return parseFloat(v); }) : undefined;
argv.minzoom = argv.minzoom !== undefined ? parseInt(argv.minzoom,10) : undefined;
argv.maxzoom = argv.maxzoom !== undefined ? parseInt(argv.maxzoom,10) : undefined;

if (argv.scheme !== 'pyramid' && argv.scheme !== 'scanline' && argv.scheme !== 'list') {
    console.warn('scheme must be one of pyramid, scanline, list')
    process.exit(1);
}

if (argv.scheme === 'list' && !argv.list) {
    console.warn('--list=file required for list scheme')
    process.exit(1);
}

if (argv.concurrency) tilelive.stream.setConcurrency(argv.concurrency);

var src;
var dst;
var srcuri = tilelive.auto(argv._[0]);
var dsturi = argv._[1] ? tilelive.auto(argv._[1]) : false;
loadsrc();

function loadsrc() {
    tilelive.load(srcuri, function(err, s) {
        if (err) throw err;
        src = s;
        loaddst();
    });
}

function loaddst() {
    if (!dsturi) return out();

    tilelive.load(dsturi, function(err, d) {
        if (err) throw err;
        dst = d;
        copy();
    });
}

function out() {
    var get = tilelive.createReadStream(src, {
        type:argv.scheme,
        minzoom:argv.minzoom,
        maxzoom:argv.maxzoom,
        bounds:argv.bounds
    });
    get.on('error', function(err) { throw err; });
    if (argv.scheme === 'list') {
        var file = fs.createReadStream(path.resolve(argv.list));
        file.pipe(get).pipe(tilelive.serialize()).pipe(process.stdout);
    } else {
        get.pipe(tilelive.serialize()).pipe(process.stdout);
    }
}

function copy() {
    var options = {
        scheme:argv.scheme,
        minzoom:argv.minzoom,
        maxzoom:argv.maxzoom,
        bounds:argv.bounds,
        list:argv.list,
        src: src,
        dst: dst
    };

    tilelive.copy(srcuri, dsturi, options, function(err) {
        if (err) throw err;
        console.log('');
    });
}

function timeRemaining(progress) {
    return Math.floor(
        (process.uptime()) * (1 / progress) -
        (process.uptime())
    );
}

